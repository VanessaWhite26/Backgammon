# -*- coding: utf-8 -*-
"""backgammon.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Fv9yeUf0Rh22QTsJbcADBHOgcXcorQrG
"""

#handles imports
import numpy
from random import randint
import time



#create board
light_zone = 0 #positive endzone
dark_zone = 0 #negative endzone
center_bar = [0, 0] #first num is positives on bar, second is negatives


#Initialize board, positive nums are light peices, negative nums are dark peices
board = [2,0,0,0,0,-5,   0,-3,0,0,0,5,
         -5,0,0,0,3,0,   5,0,0,0,0,-2]

print(board)
print(numpy.sum(board))

#rolls dice and interprets move options
dice1 = randint(1, 6)
dice2 = randint(1, 6)
print('you got ' +str(dice1)+ ' and ' +str(dice2))

if (dice1 ==dice2):
  print('you get four moves of ' +str(dice1))
else:
  print('you get one move of ' +str(dice1)+ ' and one move of ' +str(dice2))

#some game logic

#fix later to allow roll to determine turn
  init_turn = randint(0, 1) #if 0 then dark starts, if 1 then light starts

  if (init_turn == 0):
    turn = -1
  else:
    turn = 1

#alternates between player turns until game finishes
while(abs(light_zone)<15 and abs(dark_zone)<15):
    if (turn == -1):
      print('Dark turn')
      movePiece(turn,5)
    else:
      print('Light turn')
      movePiece(turn,5)

  
    time.sleep(2)
    turn = turn*-1

#player movement and verification
def movePiece(move,turn):
  print(board)
  if(turn == 1):
    origin_index = int(input("What space would you like to move from? ")) -1

    #origin validity check
    while(board[origin_index]<1):
      print('That spot does not have enough peices or is not yours.')
      origin_index = int(input("What space would you like to move from? ")) -1


    print(origin_index)
    print('there are '+str(board[origin_index])+' at index '+ str(origin_index+1))

  
    destination_index = origin_index+move

    #destination validity check
    while(board[origin_index+move]<-1):
      print("Invalid move, destination is blocked")
      origin_index = int(input("What space would you like to move from? ")) -1
      while(board[origin_index]<1):
        print('That spot does not have enough peices or is not yours.')
        origin_index = int(input("What space would you like to move from? ")) -1

      destination_index = origin_index+move
  
    # STILL NEED TO FILL IN LOGIC FOR HITTING PIECE
    if(board[origin_index+move]==-1):
      print("You hit a dark peice")
    else:
    
      board[origin_index]=board[origin_index]-1
      board[destination_index]=board[destination_index]+1
      print(board)
  elif(turn == -1):
    origin_index = int(input("What space would you like to move from? ")) -1

    #origin validity check
    while(board[origin_index]>-1):
      print('That spot does not have enough peices or is not yours.')
      origin_index = int(input("What space would you like to move from? ")) -1


    print(origin_index)
    print('there are '+str(board[origin_index])+' at index '+ str(origin_index+1))

    destination_index = origin_index-move

    #destination validity check
    while(board[origin_index-move]>1):
      print("Invalid move, destination is blocked")
      origin_index = int(input("What space would you like to move from? ")) -1
      while(board[origin_index]>-1):
        print('That spot does not have enough peices or is not yours.')
        origin_index = int(input("What space would you like to move from? ")) -1

      destination_index = origin_index-move
  
    if(board[origin_index-move]==1):
      print("You hit a light peice")
    else:
    
      board[origin_index]=board[origin_index]+1
      board[destination_index]=board[destination_index]-1
      print(board)